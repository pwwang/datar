import pytest

from datar.base import (
    ceiling,
    cov,
    floor,
    mean,
    median,
    pmax,
    pmin,
    sqrt,
    var,
    scale,
    col_sums,
    col_means,
    col_sds,
    col_medians,
    row_sums,
    row_means,
    row_sds,
    row_medians,
    min_,
    max_,
    round_,
    sum_,
    abs_,
    prod,
    sign,
    signif,
    trunc,
    exp,
    log,
    log2,
    log10,
    log1p,
    sd,
    weighted_mean,
    quantile,
    bessel_i,
    bessel_j,
    bessel_k,
    bessel_y,
    as_double,
    as_integer,
    as_logical,
    as_character,
    as_factor,
    as_ordered,
    as_date,
    as_numeric,
    arg,
    conj,
    mod,
    re_,
    im,
    as_complex,
    is_complex,
    cummax,
    cummin,
    cumprod,
    cumsum,
    droplevels,
    levels,
    set_levels,
    is_factor,
    is_ordered,
    nlevels,
    factor,
    ordered,
    cut,
    diff,
    expand_grid,
    outer,
    make_names,
    make_unique,
    rank,
    identity,
    is_logical,
    is_true,
    is_false,
    is_na,
    is_finite,
    is_infinite,
    any_na,
    as_null,
    is_null,
    set_seed,
    rep,
    c_,
    c,
    length,
    lengths,
    order,
    sort,
    rev,
    sample,
    seq,
    seq_along,
    seq_len,
    match,
    beta,
    lgamma,
    digamma,
    trigamma,
    choose,
    factorial,
    gamma,
    lfactorial,
    lchoose,
    lbeta,
    psigamma,
    rnorm,
    runif,
    rpois,
    rbinom,
    rcauchy,
    rchisq,
    rexp,
    is_character,
    grep,
    grepl,
    sub,
    gsub,
    strsplit,
    paste,
    paste0,
    sprintf,
    substr,
    substring,
    startswith,
    endswith,
    strtoi,
    trimws,
    toupper,
    tolower,
    chartr,
    nchar,
    nzchar,
    table,
    tabulate,
    is_atomic,
    is_double,
    is_element,
    is_integer,
    is_numeric,
    any_,
    all_,
    acos,
    acosh,
    asin,
    asinh,
    atan,
    atanh,
    cos,
    cosh,
    cospi,
    sin,
    sinh,
    sinpi,
    tan,
    tanh,
    tanpi,
    atan2,
    append,
    colnames,
    set_colnames,
    rownames,
    set_rownames,
    dim,
    diag,
    duplicated,
    intersect,
    ncol,
    nrow,
    proportions,
    setdiff,
    setequal,
    unique,
    t,
    union,
    max_col,
    complete_cases,
    head,
    tail,
    which,
    which_min,
    which_max,
)

from datar.core.utils import NotImplementedByCurrentBackendError


@pytest.mark.parametrize("fun,args", [
    (ceiling, [1]),
    (cov, [[1, 2], [3, 4]]),
    (floor, [1]),
    (mean, [1]),
    (median, [1]),
    (pmax, [1]),
    (pmin, [1]),
    (sqrt, [1]),
    (var, [1]),
    (scale, [1]),
    (col_sums, [1]),
    (col_means, [1]),
    (col_sds, [1]),
    (col_medians, [1]),
    (row_sums, [1]),
    (row_means, [1]),
    (row_sds, [1]),
    (row_medians, [1]),
    (min_, [1]),
    (max_, [1]),
    (round_, [1]),
    (sum_, [1]),
    (abs_, [1]),
    (prod, [1]),
    (sign, [1]),
    (signif, [1]),
    (trunc, [1]),
    (exp, [1]),
    (log, [1]),
    (log2, [1]),
    (log10, [1]),
    (log1p, [1]),
    (sd, [1]),
    (weighted_mean, [1]),
    (quantile, [1]),
    (bessel_i, [1, 2]),
    (bessel_j, [1, 2]),
    (bessel_k, [1, 2]),
    (bessel_y, [1, 2]),
    (as_double, [1]),
    (as_integer, [1]),
    (as_logical, [1]),
    (as_character, [1]),
    (as_factor, [1]),
    (as_ordered, [1]),
    (as_date, [1]),
    (as_numeric, [1]),
    (arg, [1]),
    (conj, [1]),
    (mod, [1]),
    (re_, [1]),
    (im, [1]),
    (as_complex, [1]),
    (is_complex, [1]),
    (cummax, [1]),
    (cummin, [1]),
    (cumprod, [1]),
    (cumsum, [1]),
    (droplevels, [1]),
    (levels, [1]),
    (set_levels, [1, 1]),
    (is_factor, [1]),
    (is_ordered, [1]),
    (nlevels, [1]),
    (factor, [1]),
    (ordered, [1]),
    (cut, [1, 1]),
    (diff, [1]),
    (expand_grid, [1]),
    (outer, [1, 1]),
    (rank, [1]),
    (is_logical, [1]),
    (is_true, [1]),
    (is_false, [1]),
    (is_na, [1]),
    (is_finite, [1]),
    (is_infinite, [1]),
    (any_na, [1]),
    (as_null, [1]),
    (is_null, [1]),
    (set_seed, [1]),
    (rep, [1]),
    (c_, [1]),
    (c, [1]),
    (length, [1]),
    (lengths, [1]),
    (order, [1]),
    (rev, [1]),
    (seq, [1]),
    (seq_along, [1]),
    (seq_len, [1]),
    (sort, [1]),
    (sample, [1]),
    (match, [1, 1]),
    (is_element, [1, 1]),
    (is_atomic, [1]),
    (is_double, [1]),
    (is_integer, [1]),
    (is_numeric, [1]),
    (any_, [1]),
    (all_, [1]),
    (acos, [1]),
    (acosh, [1]),
    (asin, [1]),
    (asinh, [1]),
    (atan, [1]),
    (atanh, [1]),
    (cos, [1]),
    (cosh, [1]),
    (cospi, [1]),
    (sin, [1]),
    (sinh, [1]),
    (sinpi, [1]),
    (tan, [1]),
    (tanh, [1]),
    (tanpi, [1]),
    (atan2, [1, 1]),
    (beta, [1, 1]),
    (choose, [1, 1]),
    (digamma, [1]),
    (lgamma, [1]),
    (lbeta, [1, 1]),
    (trigamma, [1]),
    (factorial, [1]),
    (gamma, [1]),
    (lchoose, [1, 1]),
    (lfactorial, [1]),
    (psigamma, [1, 1]),
    (rnorm, [1, 1]),
    (runif, [1, 1]),
    (rcauchy, [1, 1]),
    (rchisq, [1, 1]),
    (rexp, [1, 1]),
    (rpois, [1, 1]),
    (rbinom, [1, 1, 1]),
    (is_character, [1]),
    (grep, [1, 1]),
    (grepl, [1, 1]),
    (sub, [1, 1, 1]),
    (gsub, [1, 1, 1]),
    (strsplit, [1, 1]),
    (paste, [1]),
    (paste0, [1]),
    (sprintf, [1]),
    (substr, [1, 1, 1]),
    (tolower, [1]),
    (toupper, [1]),
    (trimws, [1]),
    (strtoi, [1]),
    (substring, [1, 1]),
    (startswith, [1, 1]),
    (endswith, [1, 1]),
    (chartr, [1, 1, 1]),
    (nchar, [1]),
    (nzchar, [1]),
    (table, [1]),
    (tabulate, [1]),
    (append, [1, 1]),
    (colnames, [1]),
    (set_colnames, [1, 1]),
    (rownames, [1]),
    (set_rownames, [1, 1]),
    (dim, [1]),
    (diag, [1]),
    (duplicated, [1]),
    (intersect, [1, 1]),
    (ncol, [1]),
    (nrow, [1]),
    (proportions, [1]),
    (setdiff, [1, 1]),
    (setequal, [1, 1]),
    (unique, [1]),
    (union, [1, 1]),
    (t, [1]),
    (max_col, [1]),
    (complete_cases, [1]),
    (head, [1]),
    (tail, [1]),
    (which, [1]),
    (which_min, [1]),
    (which_max, [1]),
])
def test_default_implementation(fun, args):
    with pytest.raises(NotImplementedByCurrentBackendError):
        fun(*args)


@pytest.mark.parametrize("x, uniq, y", [
    (["a", "b", "c"], False, ["a", "b", "c"]),
    ("a", False, ["a"]),
    (1, False, ["_1"]),
])
def test_make_names(x, uniq, y):
    out = make_names(x, uniq)
    assert out == y


@pytest.mark.parametrize("x, y", [
    (["a", "b", "c"], ["a", "b", "c"]),
    ("a", ["a"]),
])
def test_make_unique(x, y):
    out = make_unique(x)
    assert out == y


def test_identify():
    out = identity(1)
    assert out == 1
