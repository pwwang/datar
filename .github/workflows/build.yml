name: Build and Deploy

on:
  push:
  pull_request:
  release:
    types: [published]

jobs:

  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # can't build numpy for 3.10 in CI
        # python-version: [3.7, 3.8, 3.9, "3.10"]
        python-version: [3.7, 3.8, 3.9]
        pandas: [
          # pandas==1.2.0,
          pandas==1.3.0,
          pandas==1.4.0,
          pandas # lastest
        ]
        exclude:
          - python-version: 3.7
            pandas: pandas==1.4.0

    steps:
      - uses: actions/checkout@v2
      - name: Setup Python # Set Python version
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8
          python -m pip install poetry
          poetry config virtualenvs.create false
          poetry install -E pdtypes -v
          pip install wcwidth
          pip install scipy
          pip install python-slugify
          # reinstall pandas to specific version
          pip install -U $PANDAS
        env:
          PANDAS: ${{ matrix.pandas }}
      - name: Run flake8
        run: flake8 datar
      - name: Show versions
        run: python -c 'import datar; datar.get_versions()'
      - name: Test with pytest
        run: pytest tests/ --junitxml=junit/test-results-${{ matrix.python-version }}.xml
      - name: Upload pytest test results
        uses: actions/upload-artifact@v2
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@master
        if: matrix.python-version == 3.9 && matrix.pandas == 'pandas' && github.event_name != 'pull_request'
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: cov.xml

  build-modin:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # can't build numpy for 3.10 in CI
        # python-version: [3.7, 3.8, 3.9, "3.10"]
        python-version: [3.7, 3.8, 3.9]
        modin: [
          modin==0.10.2,
          modin # lastest
        ]
        exclude:
          - python-version: 3.7
            modin: modin==0.10.2

    steps:
      - uses: actions/checkout@v2
      - name: Setup Python # Set Python version
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8
          python -m pip install poetry
          poetry config virtualenvs.create false
          poetry install -E modin -E pdtypes -v
          pip install wcwidth
          pip install scipy
          pip install python-slugify
          # reinstall modin to specific version
          pip install -U $MODIN
        env:
          MODIN: ${{ matrix.modin }}
      - name: Show versions
        run: python -c 'import datar; datar.options(backend="modin"); datar.get_versions()'
      - name: Test with pytest
        run: pytest tests/ --backend modin --junitxml=junit/test-results-${{ matrix.python-version }}.xml

  deploy:
    needs: [build, build-modin]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python # Set Python version
        uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
      - name: Publish to PyPI
        run: poetry publish --build -u ${{ secrets.PYPI_USER }} -p ${{ secrets.PYPI_PASSWORD }}
        if: success()
